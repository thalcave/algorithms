#!/usr/bin/env python

"""
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
"""

import sys
import math

def get_no_divisors(cnum):
    """Returns the number of divisors of cnum"""
    #every number can be divided with 1
    no_divisors = 1

    for idx in range(2, cnum):
        a, b = divmod(cnum, idx)

        #stop when quotient is smaller than divisor (e.g 28/7 --> 4 is smaller than 7)
        if not b:
            if a < idx:
                return no_divisors * 2
            if a == idx:
                return (no_divisors*2 + 1)

            no_divisors += 1


def get_triangular(no_divisors):
    """Get triangle number with no_divisors"""
    csum = 1
    cnum = 1
    #add numbers until csum > no_divisors (searched no is greater than no_divisors)
    while csum < no_divisors:
        cnum += 1
        csum += cnum

    print "csum {0}".format(csum)

    # check for csum the number of divisors
    while 1:
        result = get_no_divisors(csum)
        print "check for {0} div {1}".format(csum, result)
        if result > no_divisors:
            print "no_of_divisors for {0} is {1}".format(csum, result)
            return csum

        cnum += 1
        csum += cnum

if __name__ == '__main__':
    if len(sys.argv) != 2:
        print "usage : ./triangular_number <no_of_divisors>"
        sys.exit(1)

    print "Triangular number: {0}".format(get_triangular(int(sys.argv[1])))
